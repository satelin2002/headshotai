// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  galleries     Gallery[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Gallery {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  status      GalleryStatus @default(PROCESSING)
  progress    Int?
  modelId     String?
  trainingId  String?
  triggerWord String?

  // Training data
  zipUrl     String? // S3 URL of the uploaded zip file
  zipKey     String? // S3 key of the uploaded zip file
  photoCount Int // Number of photos in the zip

  gender    String?
  eyeColor  String?
  hairColor String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  generatedPhotos GeneratedPhoto[]
  ZipArchive      ZipArchive?
  fullName        String
  selectedStyles  String[] @default([])

  @@index([userId])
}

model GeneratedPhoto {
  id     String @id @default(cuid())
  url    String // S3 URL
  key    String // S3 key
  prompt String // The prompt used to generate this photo

  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([galleryId])
}

enum GalleryStatus {
  PROCESSING
  GENERATING
  READY
  FAILED
  EXPIRED
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ZipArchive {
  id        String @id @default(cuid())
  url       String // S3 URL for the zip file
  key       String // S3 key for the zip file
  size      Int // Total size in bytes
  fileCount Int // Number of photos in zip

  // Relations
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  galleryId String  @unique // Makes this a one-to-one relation

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

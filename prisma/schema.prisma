// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  models        Model[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

enum Ethnicity {
  ASIAN
  BLACK
  HISPANIC
  MIDDLE_EASTERN
  WHITE
  PACIFIC_ISLANDER
  MIXED
  OTHER
}

// Add this before the Model type
 

model Model {
  id                  String         @id @default(cuid())
  title               String
  slug                String        @unique
  fullName            String
  userId              String
  status              ModelStatus   @default(PROCESSING)
  gender              String
  eyeColor            String
  hairColor           String
  age                 Int
  ethnicity           Ethnicity
  zipUrl              String
  zipKey              String
  photoCount          Int
  triggerWord         String?
  coverImage          String?
  modelId             String?       // ID of the trained model
  trainingErrorMessage String?      // Error message from training
  expiresAt           DateTime
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  trainingId          String?
  trainingConfig      Json?
  replicateData       Json?
  trainingStatus      String?
  trainingStarted     DateTime?
  trainingEnded       DateTime?
  progress            Float?
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  ZipArchive          ZipArchive?
  generatedPhotos     GeneratedPhoto[]

  @@index([userId])
  @@index([slug])
}

enum PhotoStyle {
  PROFESSIONAL  // Professional Headshots
  PROFILE       // Profile Picture
  TRAVEL        // Travel Photos
}

model GeneratedPhoto {
  id        String     @id @default(cuid())
  url       String     // S3 URL
  key       String     // S3 key
  prompt    String     // The prompt used to generate this photo
  negative  String?    // Negative prompt used
  seed      Int?      // Seed used for generation
  steps     Int       @default(30)
  cfg       Float     @default(7.5)
  isCustom  Boolean   @default(false)  // Whether this was a custom generation vs auto
  style     PhotoStyle? // Style category for the photo

  // Image metadata
  width     Int       // Width in pixels
  height    Int       // Height in pixels
  size      Int       // File size in bytes
  format    String    // File format (jpg, png, etc)
  megapixels Float    // Image resolution in megapixels
  aspectRatio String  // Aspect ratio (e.g., "3:4", "1:1")

  model     Model    @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   String   // Renamed from aiModelId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([modelId])
}

enum ModelStatus {
  PROCESSING    // Initial state when files are being processed
  TRAINING      // Model is being trained
  GENERATING    // Auto-generating initial set of photos
  READY         // Model ready for custom prompts
  FAILED        // Training or generation failed
  EXPIRED       // Collection has expired
  CANCELLED     // Training was cancelled
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model ZipArchive {
  id        String @id @default(cuid())
  url       String // S3 URL for the zip file
  key       String // S3 key for the zip file
  size      Int    // Total size in bytes
  fileCount Int    // Number of photos in zip

  // Relations
  model     Model  @relation(fields: [modelId], references: [id], onDelete: Cascade)
  modelId   String @unique

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
